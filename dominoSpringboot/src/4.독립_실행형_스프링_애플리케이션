1. 스프링 컨테이너 사용
    스프링 컨테이너는 애플리케이션 로직이 담긴 평범한 자바 오브젝트, 일명 POJO와 구성 정보(Configuration Metadata)
    를 런타임에 조합해서 동작하는 최종 애플리케이션을 만들어낸다.
    코드로 스프링 컨테이너를 만드는 가장 간단한 방법은 컨테이너를 대표하는 인터페이스(ApplicationContext) 를
    구현한 GenericApplicationContext를 이용한다.

2.의존 오브젝트 추가
    스프링 컨테이너는 싱글톤 패턴과 유사하게 애플리케이션이 동작하는 동안 딱 하나의 오브젝트만을 만들고 사용되게 만들어준다.
    이런 면에서 스프링 컨테이너는 싱글톤 레지스트리라고도 한다.

3.Dependency Injection
    스프링 컨테이너는 DI 컨테이너이다. 스프링은 DI를 적극적으로 활용해서 만들어져 있고,
    스프링을 이용해서 애플리케이션을 개발할 때 DI를 손쉽게 적용할 수 있도록 지원해준다.
    DI에는 두 개의 오브젝트가 동적으로 의존관계를 가지는 것을 도와주는 제3의 존재(어셈블러)가 필요하다.
    스프링 컨테이너는 DI를 가능하게 해주는 어셈블러로 동작한다.

4.의존 오브젝트 DI 적용
    의존 오브젝트를 생성자를 통해서 DI 어셈블러인 컨테이너가 주입을 할 수 있게 생성자 파라미터를 정의한다. 주입 받은
    오브젝트는 내부 멤버 필드로 저장해두고 이용할 수 있게 한다.
    스프링 컨테이너는 빈 오브젝트 사이의 의존관계를 여러 방법을 통해서 자동으로 파악한다. 만약 빈 클래스가 단일 생성자
    를 가지고 있다면 생성자의 파라미터 타입의 빈 오브젝트가 있는지 확인하고, 있다면 이를 생성자 호출시 주입해준다.
    명시적으로 의존 오브젝트를 주입하는 정보를 컨테이너에게 제공하려면 @Autowired와 같은 애노테이션을 지정할 수 있다.

5.DispatcherServlet으로 전환
    스프링에는 앞에서 만들었던 프론트 컨트롤러와 같은 역할을 담당하는 DispatcherServlet이 있다.
    DispatcherServlet은 서블릿으로 등록되어서 동작하면서, 스프링 컨테이너를 이용해서
    요청을 전달할 핸들러인 컨트롤러 오브젝트를 가져와 사용한다.
    DispatcherServlet이 사용하는 스프링 컨테이너는 GenericWebApplicationContext 를 이용해서 작성한다.

6.애노테이션 매핑 정보 사용
    DispatcherServlet은 스프링 컨테이너에 등록된 빈 클래스에 있는 매핑 애노테이션 정보를 참고해서
    웹 요청을 전달할 오브젝트와 메소드를 선정할 수 있다.
    클래스 레벨의 @RequestMapping과 메소드 레벨의 @GetMapping 두 가지의 정보를 조합해서 매핑에 사용할 최종 정
    보를 생성한다.
    컨트롤러 메소드의 리턴값을 웹 요청의 바디에 적용하도록 @ResponseBody를 넣어줘야 한다. 그렇지 않으면 String 타
    입의 응답은 뷰 이름으로 해석하고 Thymeleaf와 같은 뷰 템플릿을 찾으려고 한다. 이 경우 404 에러가 나올 수 있다.
    처음 사용한 @RestController는 @ResponseBody를 포함하고 있기 때문에 메소드 레벨의 @ResponseBody를 넣지
    않아도 적용된 것처럼 동작한다.

7.스프링 컨테이너로 통합
   스프링 컨테이너의 초기화 작업 중에 호출되는 훅 메소드에 서블릿 컨테이너(톰캣)을 초기화하고 띄우는 코드를 넣는다.

8.자바코드 구성 정보사용
    @Bean 팩토리 메소드를 사용하면 자바 코드를 이용해서 구성 정보를 만들 수 있다.
    자바 코드를 이용하기 때문에 빈 오브젝트를 직접 생성하고 초기화하는 등의 작업을 명시적으로 작성할 수 있다.
    @Bean 메소드의 리턴 타입은 이 빈을 의존 오브젝트로 주입 받을 다른 빈에서 참조하는 타입(주로 인터페이스)으로 지정하는 것이 좋다.
    빈 오브젝트를 생성할 때 주입할 의존 오브젝트는 @Bean 메소드의 파라미터로 정의하면 스프링 컨테이너가 이를 전달해준다.
    @Bean 메소드가 있는 클래스에는 @Configuration 애노테이션을 붙여줘야 한다.
    자바 코드를 이용한 구성 정보를 사용하려면 AnnotationConfigWebApplicationContext 클래스로 컨테이너를 만들어야 한다.

9.@Component 스캔
 클래스에 일종의 레이블에 해당하는 애노테이션을 붙여주고, 이를 스캔해서 스프링 컨테이너의 빈으로 자동 등록해주는 방법을 사용할 수 있다.
 애플리케이션의 메인 클래스에는 @ComponentScan 애노테이션을 붙여준다. 등록 대상이 될 클래스에는 @Component 애노테이션을 붙여준다.
 @Component를 메타 애노테이션으로 가지고 있는 애노테이션도 사용할 수 있다. 대표적으로 스프링이 제공하는 @Controller, @RestController, @Service 등이 있다.
 스캔을 통해서 빈을 등록하는 것은 매우 편리하지만 어떤 빈이 등록되는지 확인하려면 번거로울 수 있다. 메타 애노테이션은 애노테이션에 붙은 애노테이션이다.
 애노테이션을 정의할 때는 @Retention과 @Target을 지정한다 메타 애노테이션은 여러 단계로 중첩되기도 한다.
 대표적으로 @RestController가 있다. @RestController은 @Controller를 메타 애노테이션으로 가지고 있고, @Controller는 @Component를 메타 애노테이션으로 가지고 있다.
 이 경우에 @RestController는 @Component 애노테이션이 붙은 것과 같은 효과를 가진다. @RestController는 @Controller 외에 @ResponseBody도 메타 애노테이션으로 가진다.


// 자주 쓰는 CMD
netstat -ano | findstr :8080
taskkill /F /PID 13480
