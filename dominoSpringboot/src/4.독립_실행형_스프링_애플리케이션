1. 스프링 컨테이너 사용
    스프링 컨테이너는 애플리케이션 로직이 담긴 평범한 자바 오브젝트, 일명 POJO와 구성 정보(Configuration Metadata)
    를 런타임에 조합해서 동작하는 최종 애플리케이션을 만들어낸다.
    코드로 스프링 컨테이너를 만드는 가장 간단한 방법은 컨테이너를 대표하는 인터페이스(ApplicationContext) 를
    구현한 GenericApplicationContext를 이용한다.

2.의존 오브젝트 추가
    스프링 컨테이너는 싱글톤 패턴과 유사하게 애플리케이션이 동작하는 동안 딱 하나의 오브젝트만을 만들고 사용되게 만들어준다.
    이런 면에서 스프링 컨테이너는 싱글톤 레지스트리라고도 한다.

3.Dependency Injection
    스프링 컨테이너는 DI 컨테이너이다. 스프링은 DI를 적극적으로 활용해서 만들어져 있고,
    스프링을 이용해서 애플리케이션을 개발할 때 DI를 손쉽게 적용할 수 있도록 지원해준다.
    DI에는 두 개의 오브젝트가 동적으로 의존관계를 가지는 것을 도와주는 제3의 존재(어셈블러)가 필요하다.
    스프링 컨테이너는 DI를 가능하게 해주는 어셈블러로 동작한다.

4.의존 오브젝트 DI 적용
    의존 오브젝트를 생성자를 통해서 DI 어셈블러인 컨테이너가 주입을 할 수 있게 생성자 파라미터를 정의한다. 주입 받은
    오브젝트는 내부 멤버 필드로 저장해두고 이용할 수 있게 한다.
    스프링 컨테이너는 빈 오브젝트 사이의 의존관계를 여러 방법을 통해서 자동으로 파악한다. 만약 빈 클래스가 단일 생성자
    를 가지고 있다면 생성자의 파라미터 타입의 빈 오브젝트가 있는지 확인하고, 있다면 이를 생성자 호출시 주입해준다.
    명시적으로 의존 오브젝트를 주입하는 정보를 컨테이너에게 제공하려면 @Autowired와 같은 애노테이션을 지정할 수 있다.

5.DispatcherServlet으로 전환
    스프링에는 앞에서 만들었던 프론트 컨트롤러와 같은 역할을 담당하는 DispatcherServlet이 있다.
    DispatcherServlet은 서블릿으로 등록되어서 동작하면서, 스프링 컨테이너를 이용해서
    요청을 전달할 핸들러인 컨트롤러 오브젝트를 가져와 사용한다.
    DispatcherServlet이 사용하는 스프링 컨테이너는 GenericWebApplicationContext 를 이용해서 작성한다.

